name: Build Windows Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Setup jpackage
      shell: pwsh
      run: |
        Write-Host "jpackage available with JDK 17+"
        jpackage --version
        New-Item -ItemType Directory -Force -Path "target/dist" | Out-Null
        
    - name: Create Windows executable with jpackage
      shell: pwsh
      run: |
        $commonArgs = @(
          "--name", "RetroArcade",
          "--input", "target",
          "--main-jar", "arcade-game-executable.jar",
          "--main-class", "org.example.snakegame.GameApplication",
          "--type", "exe",
          "--win-dir-chooser",
          "--win-shortcut",
          "--win-menu",
          "--win-menu-group", "Retro Games",
          "--app-version", "1.0",
          "--vendor", "Retro Arcade Team",
          "--copyright", "Copyright 2024 Retro Arcade Team",
          "--description", "Classic Snake and Pong games with retro style",
          "--dest", "target/dist",
          "--verbose"
        )

        if (Test-Path "src/main/resources/icon.ico") {
          $commonArgs += @("--icon", "src/main/resources/icon.ico")
        }

        jpackage @commonArgs
      continue-on-error: true
      
    - name: Create Windows executable (fallback without icon)
      if: failure()
      shell: pwsh
      run: |
        $args = @(
          "--name", "RetroArcade",
          "--input", "target",
          "--main-jar", "arcade-game-executable.jar",
          "--main-class", "org.example.snakegame.GameApplication",
          "--type", "exe",
          "--win-dir-chooser",
          "--win-shortcut",
          "--win-menu",
          "--win-menu-group", "Retro Games",
          "--app-version", "1.0",
          "--vendor", "Retro Arcade Team",
          "--copyright", "Copyright 2024 Retro Arcade Team",
          "--description", "Classic Snake and Pong games with retro style",
          "--dest", "target/dist",
          "--verbose"
        )
        jpackage @args
          
    - name: Create ZIP package
      shell: pwsh
      run: |
        if (!(Test-Path "target/dist")) {
          throw "target/dist directory not found. jpackage may have failed."
        }
        Compress-Archive -Path "target/dist/*" -DestinationPath "target/RetroArcade-Windows.zip" -Force
        
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: RetroArcade-Windows-Executable
        path: target/dist/*.exe
        
    - name: Upload ZIP package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: RetroArcade-Windows-Package
        path: target/RetroArcade-Windows.zip
        
    - name: Create Release (only if tag exists)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/dist/*.exe
          target/RetroArcade-Windows.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
